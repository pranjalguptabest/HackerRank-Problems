import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the bfs function below.
    private class Node{
        private int value;
        private int next;

        public Node(int value)
        {
            this.value = value;
        }
    }

    static int[] bfs(int n, int m, int[][] edges, int s) 
    {
    //    ArrayList<ArrayList<Integer> > adj = new ArrayList<ArrayList<Integer> >(n);

    //     for(int k=1; k<=n; k++) 
    //         adj.add(new ArrayList<Integer>());

    //     for(int i=0; i<m; i++)
    //     {
    //         adj.get(edges[i][0]).add(edges[i][1]); 
    //         adj.get(edges[i][1]).add(edges[i][0]);
    //     }

           // creating adjacency matrix
           int[][] adj = new int[n][n];

           for(int i=0; i<n; i++)
           {
               for(int j=0; j<n; j++)
                  adj[i][j]=0;
           }

           for(int l=0; l<m; l++)
           {
               adj[(edges[l][0]-1)][(edges[l][1]-1)] = adj[(edges[l][1]-1)][(edges[l][0]-1)] = 1;
           }
        
        Set<Integer> visited = new LinkedHashSet<Integer>();
        Queue<Integer> queue = new LinkedList<Integer>();
            
            visited.add(s);
            queue.add(s);
            
            int[] distances = new int[n+1];
            Arrays.fill(distances, -1);
            distances[s] = 0;

            while (!queue.isEmpty()) 
            {
               int cNode = queue.poll();

              //  LinkedList<Integer> neighbors = adj[n];
                for (int x=0; x<n; x++) {
                    if (adj[cNode-1][x]==1 && (!visited.contains(x+1))) 
                    {
                        visited.add(x+1);
                        distances[x+1] = distances[cNode] + 6;
                        queue.add(x+1);
                    }
                }
            }

            int[] result = new int[n-1];
            int c=0;

            for(int a=0; a<distances.length; a++)
            {
                if(a!=0 && distances[a]!=0)
                  result[c++]=distances[a];
            }
            return result;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String[] nm = scanner.nextLine().split(" ");

            int n = Integer.parseInt(nm[0]);

            int m = Integer.parseInt(nm[1]);

            int[][] edges = new int[m][2];

            for (int i = 0; i < m; i++) {
                String[] edgesRowItems = scanner.nextLine().split(" ");
                scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

                for (int j = 0; j < 2; j++) {
                    int edgesItem = Integer.parseInt(edgesRowItems[j]);
                    edges[i][j] = edgesItem;
                }
            }

            int s = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            int[] result = bfs(n, m, edges, s);

            for (int i = 0; i < result.length; i++) {
                bufferedWriter.write(String.valueOf(result[i]));

                if (i != result.length - 1) {
                    bufferedWriter.write(" ");
                }
            }

            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
